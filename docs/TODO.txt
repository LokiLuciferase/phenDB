###Global todo file for this project
##feel free to enter TODOs and sign in to stuff you are tackling

Computational framework:
-logging all errors and what exactly happened for each bin ( )
-Singularity or Docker container for perfect encapsulation and reproducibility ( )
-Auf jeden fall output tgz generieren mit output files.

Web server:
-change default values for NOT NULL ( )
-user interface ( ) (FP)
-change access logic upon file upload to fit the database created by LL ( )
-think about malicious access prevention
-benchmark pipeline on VM using different node settings

Database ( ) (LL):
-modell version cont comp fnr fpr f√ºr alle kombinationen (fette table)
-better names for "model" model
-make new database for enog x enog function to conserve space!

Other stuff:
-Django am server oder VM
-gleich alles in DB schreiben (LL: bin dabei)
- model: appear, disappear, change. Upon update: overwrite and check dates against dates in databases
- enogs: Ask if always BactNogs are used. Ask which NOGs are nessery, load all nessesary logs (PP)
-if there is a new enog version nr: wipe out the database. need a description of that.

Output:
-give information on important missing enogs when NO is predicted

Presentation:
full specification of:
    how are enogs entered into database
    how are models entered
deliverabels, milestones, responisibilities
problems, alternatives